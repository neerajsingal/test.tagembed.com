{"version":3,"file":"static/js/399.4977a186.chunk.js","mappings":"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","sources":["app/Layout/Main/CommonComponents/Notifications.js"],"sourcesContent":["import React, { Component, Fragment, memo } from 'react';\nimport { connect } from \"react-redux\";\nimport { Tab, Nav, Image } from 'react-bootstrap';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport { ImagePlaceholder } from \"../../../../Assets/AssetsHelper\";\nimport { geturl } from \"../../../../utils\"\nimport { getAllNotification } from '../../../../actions/notificationAction';\n\n\nexport const getNotifyLoad = (notifications) => {\n    var data = {}\n    if (notifications && notifications.length > 0) {\n        notifications.map((item) => {\n            if (data[moment(new Date(item.message.time * 1000)).fromNow()]) {\n                if (!data[moment(new Date(item.message.time * 1000)).fromNow()].includes(item.id)) {\n                    data[moment(new Date(item.message.time * 1000)).fromNow()].push(item)\n                }\n            }\n            else data[moment(new Date(item.message.time * 1000)).fromNow()] = [item]\n        })\n        return data\n    }\n    else return data\n}\nclass Notifications extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            notifications: getNotifyLoad(props.notificationList),\n        }\n    }\n    \n\n    getUnreadNotifications = (notifications) => {\n        if (notifications && Object.keys(notifications).length > 0) {\n            const unreadList = Object.entries(notifications).reduce((acc, [key, notify]) => {\n                const filtered = notify.filter(item => item.status == 0)\n                if (filtered.length > 0) acc.push([key, filtered])\n                return acc;\n            }, [])\n            return Object.fromEntries(unreadList)\n        }\n        else return {}\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const { notificationList } = nextProps\n        if (JSON.stringify(notificationList) != JSON.stringify(this.state.notifications)) this.setState({ notifications: getNotifyLoad(notificationList) })\n    }\n\n    render() {\n        const { onNotificationToggle } = this.props\n        const { notifications } = this.state;\n        const unreadNotifications = this.getUnreadNotifications(notifications)\n        return <div className=\"w-100\">\n            <Tab.Container id=\"notifications_tab_panel\" defaultActiveKey=\"all-notifications\">\n                <div className=\"f-between px-3 border-bottom\">\n                    <Nav variant=\"underline\" className=\"nav\">\n                        <Nav.Item className=\"\">\n                            <Nav.Link className=\"me-3 py-3 px-0 fw-medium\" eventKey=\"all-notifications\">All</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item className=\"\">\n                            <Nav.Link className=\"px-0 py-3 fw-medium\" eventKey=\"unread-notifications\">Unread</Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                    <div>\n                    {Object.keys(unreadNotifications).length > 0 ?   <button type=\"button\" className=\"btn btn-link btn-sm px-0 h-auto fw-bold text-decoration-none btn-active-color-primary\" onClick={() =>this.props.getAllNotification('markread','')}>Mark all as read</button>:''}\n                    </div>\n                </div>\n                <div className='overflow-auto' style={{height:380}}>\n                    {notifications && Object.keys(notifications).length > 0 ? <Tab.Content>\n                        <Tab.Pane eventKey=\"all-notifications\" className=\"pb-3 min-h-100\">\n                            {\n                                notifications && Object.keys(notifications).map((iNot, index) => {\n                                    return <Fragment key={index}><div className=\"f-between px-3 py-1\" >\n                                        <span className=\"fw-bold\">{iNot}</span>\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 d-none\">{(notifications[iNot] && notifications[iNot].length > 0) ? notifications[iNot].length : 0}</span>\n                                    </div>\n                                        {notifications[iNot] && notifications[iNot].length > 0 ? <div className=\"\">\n\n                                            {\n                                                notifications[iNot].map((Item) => {\n                                                    return <Link to={geturl(Item.url)} key={Item.id} className={`px-3 d-flex align-items-start border-bottom notification-item${Item.status == 0 ? ` bg-gray-100` : ``}`}  onClick={() =>{ if(Item.status == 0) this.props.getAllNotification('all',Item.id); onNotificationToggle()}} title={Item.message.subject}>\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 p-2\">\n                                                            <Image src={Item.message.photo} height=\"40\" width=\"40\" onError={event => event.target.src = ImagePlaceholder} alt={Item.message.subject} title={Item.message.subject} />\n                                                        </div>\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\n                                                            {Item.message.subject != '' ? <span className=\"text-hover-primary text-gray-800 fw-bold me-2\">{Item.message.subject}</span>: null}\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(Item.message.time * 1000)).format(\"hh:mma\")}</span>\n                                                            </div>\n                                                            <div className=\"d-flex algin-items-start\">\n                                                                <span className=\"text-gray-700 fs-9\">\n                                                                    {Item.message.text}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </Link>\n\n                                                })\n                                            }\n\n                                        </div> : index == 0 ?\n                                            <div className=\"f-center\" style={{ height: 350 }}>\n                                                <p className=\"mb-0 text-muted\">No Notifications</p>\n                                            </div>\n                                            : null}\n                                    </Fragment>\n\n                                })\n                            }\n                        </Tab.Pane>\n                        <Tab.Pane eventKey=\"unread-notifications\" className=\"pb-3 min-h-100\">\n                            {unreadNotifications && Object.keys(unreadNotifications).length > 0 ? Object.keys(unreadNotifications).map((iNot, index) => {\n                                return <Fragment key={index}>\n                                    <div className=\"f-between px-3 py-1\">\n                                        <span className=\"fw-bold\">{iNot}</span>\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 d-none\">{unreadNotifications[iNot] && unreadNotifications[iNot].length > 0 && unreadNotifications[iNot].filter((a) => a.status == 0).length > 0 ? unreadNotifications[iNot].filter((a) => a.status == 0).length : 0}</span>\n                                    </div>\n                                    {unreadNotifications[iNot] && unreadNotifications[iNot].length > 0 ?\n                                        <div className=\"\">\n                                            {unreadNotifications[iNot].map((Item, index) => {\n                                                return Item.status == 0 ?\n                                                    <Link to={Item.getNotificationUrl ? Item.getNotificationUrl : `#`} key={index} className=\"px-3 d-flex align-items-start border-bottom notification-item text-decoration-none\" onClick={() =>{ if(Item.status ==0) this.props.getAllNotification('all',Item.id); onNotificationToggle()}} title={Item.message.subject}>\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 p-2\">\n                                                            <Image src={Item.message.photo} height=\"40\" width=\"40\" onError={event => event.target.src = ImagePlaceholder} alt={Item.message.subject} title={Item.message.subject}/>\n                                                        </div>\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\n                                                                {Item.message.subject != '' ? <span className=\"text-hover-primary fw-bold text-decoration-none me-2\">{Item.message.subject}</span> : null}\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(Item.message.time * 1000)).format(\"hh:mma\")}</span>\n                                                            </div>\n                                                            <div className=\"d-flex algin-items-start\">\n                                                                <span className=\"text-gray-700 fs-9\">\n                                                                    {Item.message.text}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </Link> : null\n\n                                            })}\n                                        </div>\n                                        : null}\n                                </Fragment>\n                            }) :\n                                <div className=\"f-center\" style={{ height: 350 }}>\n                                    <p className=\"mb-0 text-gray-500 fs-8\">No Unread Notifications</p>\n                                </div>\n                            }\n                        </Tab.Pane>\n                    </Tab.Content> : <div className=\"f-center\" style={{ height: 150 }}>\n                        <p className=\"mb-0 text-gray-500 fs-8\">No Notifications</p>\n                    </div>}\n                </div>\n            </Tab.Container>\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        notificationList: state.notification.notificationList\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getAllNotification: (type,id) => dispatch(getAllNotification(type,id)),\n    }\n  }\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(Notifications));"],"names":["getNotifyLoad","notifications","data","length","map","item","moment","Date","message","time","fromNow","includes","id","push","Notifications","Component","constructor","props","super","getUnreadNotifications","Object","keys","unreadList","entries","reduce","acc","_ref","key","notify","filtered","filter","status","fromEntries","this","state","notificationList","componentWillReceiveProps","nextProps","JSON","stringify","setState","render","onNotificationToggle","unreadNotifications","_jsx","className","children","_jsxs","Tab","Container","defaultActiveKey","Nav","variant","Item","Link","eventKey","type","onClick","getAllNotification","style","height","Content","Pane","iNot","index","Fragment","to","geturl","url","title","subject","Image","src","photo","width","onError","event","target","ImagePlaceholder","alt","format","text","a","getNotificationUrl","connect","notification","dispatch","memo"],"sourceRoot":""}