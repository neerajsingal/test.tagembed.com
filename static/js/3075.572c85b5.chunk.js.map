{"version":3,"file":"static/js/3075.572c85b5.chunk.js","mappings":"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","sources":["app/Layout/Main/Feeds/ManageFeed/Components/SelectAccount.js","app/Layout/Main/Feeds/ManageFeed/Components/FeedsList.js","app/Layout/Main/Feeds/ManageFeed/index.js"],"sourcesContent":["import React, { Component } from 'react'\n import Select from 'react-select'; \nimport { AUTHOR_IMAGE } from '../../../../../../utils';\n\nexport default class SelectAccount extends Component {\n\n    state = {selectedOption:null , allOptions:[] };\n     \n     componentDidMount(){\n         const {feed} = this.props \n         var option=[], fontDefault \n\n\n         feed && feed.accountList && feed.accountList.length && feed.accountList.map((account, index)=>{\n            if (account.id == feed.connectedAccount) {\n                fontDefault = { value: account.id, label: (<span  className=\"filter-option pull-left d-flex align-items-center\" key={account.id}><div  className=\"symbol symbol-30 random_color-2 symbol-circle mr-2 selectAcc\"style={{ backgroundImage: `url(${account.profilePicture.replace(/\\s/g, '')}),url(${AUTHOR_IMAGE(account.accountName, account.color)})` }}></div>{account.accountName}</span>) }\n              }\n\n              option.push({ value: account.id, label: (<span  className=\"filter-option pull-left d-flex align-items-center\"  key={index}><div  className=\"symbol symbol-30 random_color-2 symbol-circle mr-2 selectAcc\"style={{ backgroundImage: `url(${account.profilePicture.replace(/\\s/g, '')}),url(${AUTHOR_IMAGE(account.accountName, account.color)})` }}></div>{account.accountName}</span>) })\n         }) \n        this.setState({allOptions:option, selectedOption:fontDefault})\n     }\n\n    \n\n\n\n    handleChange = (e) => {\n        const { feed , changeAccount} = this.props\n         changeAccount(e.value, feed.id);\n         \n    }\n\n\n    render() {\n        const { selectedOption, allOptions } = this.state; \n        \n        return ( allOptions && allOptions.length && selectedOption && selectedOption.value ? \n        <Select  className=\"selectedOptionData\" defaultValue={selectedOption}  onChange={(e)=>this.handleChange(e)}  options={allOptions}  /> :'')\n    }\n}\n","import React, { Component } from 'react'\nimport { Button, Image, Table, Form, OverlayTrigger, Tooltip, Dropdown } from 'react-bootstrap';\nimport Author from '../../../CommonComponents/Author/Author';\nimport { Link } from 'react-router-dom';\nimport SelectAccount from './SelectAccount'\nimport HTMLReactParser from 'html-react-parser';\nimport { connect } from 'react-redux'\nimport { GET_FEEDS } from '../../../../../../actions/manageFeedsAction'\nimport { GET_NETWORK_NAME, showAddAccounntAlert, switchWarning } from '../../../../../../utils'\nimport { GET_NETWORK_ICON } from '../../../../../../utils';\nimport { baseUrl, FontAwesomeIcon } from '../../../../../../Assets/AssetsHelper';\nimport { checkPermission } from '../../../../../../actions/collaboratorActions';\n\nclass FeedsList extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            moderation: this.props.feed.moderation,\n            status: this.props.feed.status,\n            connectedAccount: this.getConnectAccount(),\n        }\n    }\n\n    getConnectAccount = () => {\n        const { accountList, connectedAccount } = this.props.feed;\n        const connectedAcc = accountList.length > 0 ? accountList.filter((account) => account.id === connectedAccount) : [];\n        return connectedAcc.length > 0 ? connectedAcc[0] : accountList.length > 0 ? accountList[0] : {}\n    }\n\n    componentDidMount() {\n        const { feed } = this.props\n        this.setState({ status: feed.status, moderation: feed.moderation })\n    }\n\n    onModerationSwitch = (status) => {\n        const { feed, changeStatus } = this.props\n        changeStatus(feed.id, Number(status), 'moderation')\n        this.setState({ moderation: Number(status) })\n    }\n\n    onFeedStatusSwitch = (status) => {\n        const { feed, changeStatus } = this.props\n        changeStatus(feed.id, Number(status), 'status')\n        this.setState({ status: Number(status) })\n    }\n\n    connectAccount = (obj, status) => {\n        const item = {\n            id: obj.networkId,\n            name: (obj.networkName).toLowerCase()\n        }\n        localStorage.setItem(\"feedId\", obj.id);\n        if (status) localStorage.setItem(\"refresh\", true);\n        localStorage.setItem(\"connectionType\", 'manageFeed');\n        showAddAccounntAlert(item, status, true)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.accountChanged != this.props.accountChanged) {\n            this.setState({ connectedAccount: this.getConnectAccount() })\n        }\n    }\n\n    render() {\n        const { feed, onFeedDelete, changeAccount } = this.props\n        const { status, moderation, connectedAccount } = this.state\n        const { filterId, networkId, accountList, isBtntext } = feed\n        return (\n            <tr>\n                <td>\n                    <div className=\"d-flex align-items-center\">\n                        <span className=\"h-34px w-34px me-2 d-flex flex-shrink-0\">\n                            <Image className=\"h-100\" src={baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(feed.networkId)}.svg`)} height={43} width={43} title={GET_NETWORK_NAME(feed.networkId)} alt={GET_NETWORK_NAME(feed.networkId)} fluid/>\n                        </span>\n                        <div style={{ minWidth: 170 }}>\n                            <p className=\"mb-0 d-flex\">\n                                <span className=\"feed_name fw-semibold\">{HTMLReactParser(feed.name)}{\" \"}</span>\n                                {feed.socialLink ?\n                                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{feed.tooltip}</Tooltip>}>\n                                        <Link className=\"ms-2 text-muted\" to={feed.networkId !== 8 ? feed.socialLink : `https://vimeo.com/user${feed.accountId}`} target=\"_blank\" title='support'>\n                                            <FontAwesomeIcon icon={'arrow-up-right-from-square'} />\n                                        </Link>\n                                    </OverlayTrigger>\n                                    : null}\n                            </p>\n                            <small className=\"mb-0 text-gray-700\">{feed.networkName}</small>\n                        </div>\n                    </div>\n                </td>\n                <td>\n                    <div className=\"d-flex align-items-center\">\n                        {[1, 2, 3, 4, 5, 8, 65, 67, 26, 23, 86].includes(filterId) && networkId != 2 && accountList && accountList.length > 0 ?\n                            <Dropdown style={{ minWidth: 220 }}>\n                                <Dropdown.Toggle variant=\"secondary\" size={'sm'} className=\"d-flex align-items-center w-100 justify-content-between\">\n                                    <div className=\"d-flex align-items-center flex-grow-1\">\n                                        <Author className={'symbol symbol-26 symbol-circle flex-shrink-0 me-2'}\n                                            imageSize={26}\n                                            symbolClass={'symbol-label fs-8'}\n                                            name={connectedAccount.accountName} profileUrl={connectedAccount.profilePicture} networkId={networkId} />\n                                        <div className=\"overflow-hidden\" style={{ maxWidth: 130 }}>\n                                            <p className=\"fw-medium mb-0 text-ellipsis fs-9\">{connectedAccount.accountName}</p>\n                                        </div>\n                                    </div>\n                                    {(isBtntext == \"Reconnect\" || isBtntext == \"Connect\") ?\n                                        <OverlayTrigger overlay={<Tooltip>Feed disconnected as the social media account's user name got changed since your last connection with Tagbox. Kindly click on the button below to connect.</Tooltip>}>\n                                            <span className='me-1 fs-5 text-danger h-14px w-14px'>\n                                                <FontAwesomeIcon icon={'circle-info'} />\n                                            </span>\n                                        </OverlayTrigger>\n                                        : null}\n                                </Dropdown.Toggle>\n\n                                <Dropdown.Menu className=\"w-100\">\n                                    {accountList.map(account => {\n                                        const { id, profilePicture, accountName } = account;\n                                        return <Dropdown.Item key={id} onClick={() => checkPermission('networkManager', 'manageFeed', true) ? changeAccount(id, feed.id) : {}}>\n                                            <div className=\"d-flex align-items-center\">\n                                                <Author className={'symbol symbol-26 symbol-circle flex-shrink-0 me-2'}\n                                                    imageSize={26}\n                                                    symbolClass={'symbol-label fs-8'}\n                                                    name={accountName} profileUrl={profilePicture} networkId={networkId} />\n                                                <div className=\"overflow-hidden\" style={{ maxWidth: 130 }}>\n                                                    <p className=\"fw-medium mb-0 text-ellipsis fs-9\">{accountName}</p>\n                                                </div>\n                                            </div>\n                                        </Dropdown.Item>\n                                    })}\n                                </Dropdown.Menu>\n                            </Dropdown>\n                            : '--'}\n                        <div className=\"d-flex ms-3\">\n                            {isBtntext == \"Reconnect\" ?\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip>Reconnect</Tooltip>}>\n                                    <Button variant='icon' size='sm' className='btn-active-primary' aria-label='Reconnect' onClick={() => checkPermission('networkManager', 'manageAccount', true) ? this.connectAccount(feed, true) : {}}>\n                                        <FontAwesomeIcon type={'solid'} icon={'rotate'} />\n                                    </Button>\n                                </OverlayTrigger>\n                                : ''}\n                            {isBtntext == \"Connect\" ?\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip>Connect</Tooltip>}>\n                                    <Button variant='icon' size='sm' className=\"btn-active-primary\" aria-label='Connect' onClick={() => checkPermission('networkManager', 'manageAccount', true) ? this.connectAccount(feed, false) : {}}>\n                                        <FontAwesomeIcon type={'solid'} icon={'rotate'} />\n                                    </Button>\n                                </OverlayTrigger>\n                                : ''}\n                        </div>\n                    </div>\n                </td>\n                {/* <td>\n                    <div className=\"d-flex align-items-center\">\n\n                            {feed && feed.accountList && feed.accountList.length ?\n                            feed.filterId && [1, 2, 3, 4, 5, 8, 65, 67, 26].includes(feed.filterId) && feed.networkId != 2 ?\n                                feed.accountList.filter(x => x.id == feed.connectedAccount) ? <>\n\n                                    <SelectAccount changeAccount={changeAccount} feed={feed} key={feed.id} />\n                                </>\n                                    : ''\n                                : ''\n                            : ''}\n                        \n                        <div className=\"d-flex ms-3\">\n                            {feed.isBtntext == \"Reconnect\" ?\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip>Reconnect</Tooltip>}>\n                                    <button type=\"button\" className=\"btn btn-icon btn-active-primary p-0 w-32px h-32px\" onClick={() => this.connectAccount(feed, true)}>\n                                        <FontAwesomeIcon icon={'arrow-rotate'} />\n                                    </button>\n                                </OverlayTrigger>\n                                : ''}\n                            {feed.isBtntext == \"Connect\" ?\n                                <OverlayTrigger placement=\"top\" overlay={<Tooltip>Connect</Tooltip>}>\n                                    <button type=\"button\" className=\"btn btn-icon btn-active-primary p-0 w-32px h-32px\" onClick={() => this.connectAccount(feed, false)}>\n                                        <FontAwesomeIcon icon={'arrow-rotate'} />\n                                    </button>\n                                </OverlayTrigger>\n                                : ''}\n                        </div>\n                    </div>\n                </td> */}\n                <td>\n                    <p className=\"fs-8 fw-semibold mb-0\" data-id=\"post\" style={{minWidth: 120}}>{feed.postCount ? feed.postCount : 0}</p>\n                    <span className=\"fs-8 text-gray-700\">Approved {feed.postCount > 1 ? 'posts' : 'post'}</span>\n                </td>\n                <td>\n                    <Form.Check type=\"switch\" checked={moderation} data-id=\"moderation\" onChange={() => checkPermission('networkManager', 'manageFeed', true) ? moderation ? this.onModerationSwitch(!moderation) : switchWarning('Enabling moderation will make all newly received posts private until they are reviewed and approved.',this.onModerationSwitch,!moderation) : {}} />\n                </td>\n                <td>\n                    <Form.Check type=\"switch\" checked={status} data-id=\"status\" onChange={() => checkPermission('networkManager', 'manageFeed', true) ? !status ? this.onFeedStatusSwitch(!status) : switchWarning('Disabling this status will hide all collected posts from this feed, affecting visibility and content access.',this.onFeedStatusSwitch,!status) : {}} />\n                </td>\n                <td className=\"pr-0 text-end\">\n                    <div className=\"d-flex align-items-center justify-content-end\" onClick={() => checkPermission('networkManager', 'manageFeed', true) ? onFeedDelete(feed.id, feed.networkId) : {}}>\n                        <OverlayTrigger placement=\"top\" overlay={<Tooltip>Delete</Tooltip>}>\n                            <Button variant='icon' size='sm' data-id=\"delete\" className=\"btn-active-primary\" aria-label=\"delete\">\n                                <FontAwesomeIcon type=\"solid\" icon={'trash-can'} />\n                            </Button>\n                        </OverlayTrigger>\n                    </div>\n                </td>\n            </tr>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        GET_FEEDS: () => dispatch(GET_FEEDS()),\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FeedsList);\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Table, Card, Button } from 'react-bootstrap';\nimport { ACTION_DELETE_FEED, ACTION_FEED_STATUS, ACTION_UPDATE_SOCIAL_ACCOUNT, GET_FEEDS } from '../../../../../actions/manageFeedsAction';\nimport FeedsList from './Components/FeedsList';\nimport { Loader } from '../../CommonComponents/Loader';\nimport Swal from 'sweetalert2'\nimport { addAccountFromId } from '../../../../../utils/addAccount';\nimport { getModeration } from '../../../../../actions/moderationActions';\nimport { FontAwesomeIcon } from '../../../../../Assets/AssetsHelper';\nimport { Link } from 'react-router-dom';\nimport withRouter from '../../../../routes/WithRouter';\nimport EmptyWithIcon from '../../CommonComponents/Empty/EmptyWithIcon';\nimport { TOGGLE_ADD_GALLERY } from '../../../../../reducer/keys';\nimport { SNAPUP_DETAILS_ACTION } from '../../../../../actions/addFeedActions';\nimport { checkPermission } from '../../../../../actions/collaboratorActions';\nimport SubHeaderCrumbs from '../../CommonComponents/SubHeader';\nimport { parseAUTHJson } from '../../../../../utils';\n\nconst tableHeaders = [\n    { name: \"Name\", minWidth: 150 },\n    { name: \"Account\", minWidth: 150 },\n    { name: \"Posts\", minWidth: 120 },\n    { name: \"Moderation\", minWidth: 50 },\n    { name: \"Status\", minWidth: 50 },\n    { name: \"Actions\", minWidth: 70, align: 'text-end' }\n];\nclass Managefeeds extends Component {\n    state = { currentPage: 1, showPost: 30, totalPage: 1, allFeeds: [], currentPageFeeds: null, accountChanged: false }\n\n    componentDidMount() {\n        window.addEventListener(\"message\", this.handleMessage);\n        this.props.GET_FEEDS();\n        this.countAllPage()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!this.props.manageFeeds?.loading && !this.props.wallsLoader && !this.props.manageFeeds?.feeds?.length) {\n            const wallId = localStorage.getItem('wallId');\n            if (wallId) {\n                this.props.navigate(`/content/addfeed/${wallId}`);\n            }\n        }\n        else if (this.props.manageFeeds?.feeds?.length == 1) {\n            const { id, networkId } = this.props.manageFeeds?.feeds[0]\n            if (id == 0 && networkId == 0) {\n                const wallId = localStorage.getItem('wallId');\n                if (wallId) this.props.navigate(`/content/addfeed/${wallId}`);\n            }\n        }\n    }\n\n    changeTotalPost = (e) => { this.setState({ showPost: parseInt(e.target.value), currentPage: 1 }, () => this.countAllPage()) }\n\n    nextPrev = (no) => { this.setState({ currentPage: no }, () => this.countAllPage()) }\n\n    countAllPage = () => {\n        const { manageFeeds } = this.props;\n        const feeds = manageFeeds?.feeds\n        this.setState({ allFeeds: feeds, totalPage: Math.ceil((feeds && feeds.length > 0 ? feeds.length : 0) / this.state.showPost) });\n    }\n\n\n    changeStatus = (feedId, status, action) => {\n        this.props.ACTION_FEED_STATUS(feedId, status, action, this.onSuccessUpdateRedux)\n    }\n\n\n    changeAccount = (id, feedId) => {\n        this.props.ACTION_UPDATE_SOCIAL_ACCOUNT(id, feedId, this.onSuccessUpdateRedux)\n    }\n    onSuccessUpdateRedux = (val) => {\n        this.props.getModeration();\n        this.countAllPage()\n        if (val == 'account') this.setState({ accountChanged: !this.state.accountChanged })\n    }\n\n    onFeedDelete = (feedId, networkId) => {\n        Swal.fire({\n            icon: 'warning',\n            title: 'Are you sure?',\n            showCloseButton: true,\n            showCancelButton: true,\n            focusConfirm: true,\n            confirmButtonText: 'Yes',\n            confirmButtonAriaLabel: 'Yes',\n            cancelButtonText: 'No',\n            cancelButtonAriaLabel: 'Thumbs down'\n        }).then((result) => {\n            if (result.value) {\n                this.props.ACTION_DELETE_FEED(feedId, networkId, this.onDeleteUpdateRedux(networkId))\n            }\n        });\n    }\n\n    onDeleteUpdateRedux = (networkId) => {\n        this.props.getModeration();\n        this.countAllPage()\n    }\n\n    handleMessage = async (event) => {\n        try {\n            const response = parseAUTHJson(event.data);\n            const { code, networkId, type } = response;\n            if (type == \"manageFeed\") {\n                if (code) await addAccountFromId(parseInt(networkId), code, this.props.GET_FEEDS);\n            }\n        } catch (error) {\n            console.log(\"--- handleMessage error ---\", error);\n        }\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener(\"message\", this.handleMessage);\n    }\n\n    getPagination = () => {\n        const { currentPage, totalPage } = this.state;\n        const pagination = [];\n\n        if (totalPage <= 5) {\n            for (let i = 1; i <= totalPage; i++) {\n                pagination.push(i);\n            }\n        } else {\n            if (currentPage <= 3) {\n                pagination.push(1, 2, 3, 4, '...', totalPage);\n            } else if (currentPage > totalPage - 3) {\n                pagination.push(1, '...', totalPage - 3, totalPage - 2, totalPage - 1, totalPage);\n            } else {\n                pagination.push(1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPage);\n            }\n        }\n\n        return pagination;\n    }\n\n\n\n    render() {\n        const { currentPage, showPost, totalPage, allFeeds, accountChanged } = this.state;\n        const { manageFeeds, wallsLoader, allWalls, navigate } = this.props;\n        const pagination = this.getPagination();\n\n        const startIdx = (currentPage - 1) * showPost;\n        const currentFeeds = allFeeds > 0 ? allFeeds.slice(startIdx, startIdx + showPost) : [];\n        const getWallData = allWalls?.find((e) => e.id == localStorage.getItem('wallId')) ?? {};\n\n        return <>\n            {allWalls?.length ? <SubHeaderCrumbs key={getWallData?.id} crumbs={[{ name: getWallData?.name ?? \"\", icon: \"grid-2-plus\",  imgUrl : getWallData?.thumbnail ?? \"\" },{ name: \"Home\", link: \"/home\"},{ name: \"Content\", link: \"/content\"}, {name: getWallData?.name, link:`/content/moderation/${getWallData?.id}`}, { name: \"Manage feeds\", link: `/content/managefeed/${getWallData?.id || localStorage.getItem('wallId') || ''}`}]} RightComponent={<div>\n                {!manageFeeds.loading && !wallsLoader ?\n                allWalls && allWalls.length > 0 ?\n                <button onClick={() => checkPermission('networkManager', 'manageFeed', true) ? navigate(`/content/addfeed/${localStorage.getItem('wallId')}`) : {}} className=\"btn btn-primary btn-sm text-nowrap btn-min-w\">\n                    <FontAwesomeIcon icon={'plus'} iconClass=\"me-1\" />\n                    Add feed\n                </button>\n                :\n                <Button size='sm' className='text-nowrap btn-min-w' onClick={() => checkPermission('contentGallery', 'createGallery', true) ? this.props.TOGGLE_ADD_GALLERY(true) : {}}>\n                    <FontAwesomeIcon icon={'plus'} iconClass=\"me-1\" />\n                    Add Gallery</Button> : null}\n            </div>} showGallerySwitcher={false} /> : null}\n            <div className='d-flex flex-column flex-column-fluid full-content mt-10 mt-lg-0'>\n                <Container>\n                    <Card>\n                        {/* <Card.Header className='f-between d-flex'>\n                            <div className=\"f-center\">\n                            \n                            </div>\n                        </Card.Header> */}\n                        <Card.Body>\n                            <div className=\"mb-xl-5 mb-4 d-flex flex-column justify-content-between p-3 position-relative\" style={{ minHeight: 'calc(100vh - 210px)' }}>\n                                {!manageFeeds.loading && !wallsLoader ?\n                                    allWalls && allWalls.length > 0 ?\n                                        <div className='table-responsive' style={{ minHeight: 'calc(100vh - 235px)' }}>\n                                            <Table size='lg' className='pb-10'>\n                                                <thead className=\"thead-light\">\n                                                    <tr>\n                                                        {\n                                                            tableHeaders.map((header, i) => <th key={i} className={`fw-bold text-nowrap ${header?.align || ''}`} style={{ minWidth: header.minWidth }}>{header.name}</th>)\n                                                        }\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {manageFeeds?.feeds && manageFeeds?.feeds.length ? manageFeeds?.feeds.map((feed) => {\n                                                        return !(feed?.id == 0 && feed?.networkId == 0) ? <FeedsList feed={feed} changeStatus={this.changeStatus} onFeedDelete={this.onFeedDelete} changeAccount={this.changeAccount} key={`tr_${feed.id}`} accountChanged={accountChanged} /> : null\n                                                    }) : null}\n                                                </tbody>\n                                            </Table>\n                                        </div>\n                                        :\n                                        <div className=\"f-center\" style={{ minHeight: 'calc(100vh - 225px)' }}>\n                                            <EmptyWithIcon title={'Create a Gallery, to add feed! ⌛'} desc={'Oops! Looks like you have deleted your gallery, create one by simply clicking on the button below.'} icon={'media'} button={{ action: () => checkPermission('contentGallery', 'createGallery', true)  ? this.props.TOGGLE_ADD_GALLERY(true) : {}, text: 'Create Gallery' }} isFullScreen={false} />\n                                        </div>\n                                    :\n                                    <div style={{ minHeight: 'calc(100vh - 500px)' }}>\n                                        <Loader />\n                                    </div>\n                                }\n                            </div>\n                        </Card.Body>\n                        {/* <Card.Footer>\n                            <div className='d-flex justify-content-between align-items-center'>\n                                <div className=\"my-2 text-muted\">\n                                    Showing {startIdx + 1} to {startIdx + currentFeeds.length} of {manageFeeds?.feeds ? manageFeeds?.feeds.length : 0} entries\n                                </div>\n                                <div className=\"f-center\">\n                                    <span className='f-center text-muted fw-medium my-1'>Show\n                                        <Form.Select className='mx-2' onChange={e => this.changeTotalPost(e)}>\n                                            <option value=\"5\" selected={showPost === 5}>5</option>\n                                            <option value=\"10\" selected={showPost === 10}>10</option>\n                                            <option value=\"15\" selected={showPost === 15}>15</option>\n                                            <option value=\"20\" selected={showPost === 20}>20</option>\n                                            <option value=\"30\" selected={showPost === 30}>30</option>\n                                            <option value=\"40\" selected={showPost === 40}>40</option>\n                                        </Form.Select>\n                                        entries\n                                    </span>\n                                    \n                                    {totalPage > 1 && (\n                                        <ul className=\"pagination pagination-sm my-1 ms-2\">\n                                            <li className=\"page-item\">\n                                                <span className={`page-link ${currentPage == 1 ? ' disabled' : ' cursor-pointer'}`} onClick={() => { this.nextPrev(currentPage - 1) }}>\n                                                    <FontAwesomeIcon icon={'angle-left'} />\n                                                </span>\n                                            </li>\n                                            {pagination.map((page, i) => (\n                                                page === '...' ? (\n                                                    <li className=\"page-item\" key={i}>\n                                                        <span className=\"page-link\">...</span>\n                                                    </li>\n                                                    ) : (\n                                                    <li key={i} className={`page-item ${currentPage === page ? 'active' : ''}`} onClick={() => this.setState({ currentPage: page }, () => this.countAllPage())}>\n                                                        <span className=\"page-link\">{page}</span>\n                                                    </li>\n                                                    )\n                                            ))}\n                                            <li className=\"page-item\">\n                                                <span className={`page-link ${currentPage === totalPage ? ' disabled' : ' cursor-pointer'}`} onClick={() => { this.nextPrev(currentPage + 1) }}>\n                                                    <FontAwesomeIcon icon={'angle-right'} />\n                                                </span>\n                                            </li>\n                                        </ul>\n                                    )}\n                                </div>\n                            </div>\n                        </Card.Footer> */}\n                    </Card>\n                </Container>\n            </div>\n        </>\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n\n        manageFeeds: state.manageFeeds,\n        wallsLoader: state?.dashboardData?.wallsLoader,\n        allWalls: state?.dashboardData?.dashboarddata?.allWalls,\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        GET_FEEDS: () => dispatch(GET_FEEDS()),\n        ACTION_DELETE_FEED: (feedId, networkId, callback) => dispatch(ACTION_DELETE_FEED(feedId, networkId, callback)),\n        ACTION_FEED_STATUS: (feedId, status, action, callback) => dispatch(ACTION_FEED_STATUS(feedId, status, action, callback)),\n        ACTION_UPDATE_SOCIAL_ACCOUNT: (accountId, feedId, callback) => dispatch(ACTION_UPDATE_SOCIAL_ACCOUNT(accountId, feedId, callback)),\n        getModeration: () => dispatch(getModeration()),\n        TOGGLE_ADD_GALLERY: (status) => dispatch({ type: TOGGLE_ADD_GALLERY, payload: status }),\n        SNAPUP_DETAILS_ACTION: (callback) => dispatch(SNAPUP_DETAILS_ACTION(callback)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Managefeeds))"],"names":["Component","FeedsList","constructor","props","super","getConnectAccount","accountList","connectedAccount","this","feed","connectedAcc","length","filter","account","id","onModerationSwitch","status","changeStatus","Number","setState","moderation","onFeedStatusSwitch","connectAccount","obj","item","networkId","name","networkName","toLowerCase","localStorage","setItem","showAddAccounntAlert","state","componentDidMount","componentDidUpdate","prevProps","accountChanged","render","onFeedDelete","changeAccount","filterId","isBtntext","_jsxs","children","_jsx","className","Image","src","baseUrl","GET_NETWORK_ICON","height","width","title","GET_NETWORK_NAME","alt","fluid","style","minWidth","HTMLReactParser","socialLink","OverlayTrigger","placement","overlay","Tooltip","tooltip","Link","to","accountId","target","FontAwesomeIcon","icon","includes","Dropdown","Toggle","variant","size","Author","imageSize","symbolClass","accountName","profileUrl","profilePicture","maxWidth","Menu","map","Item","onClick","checkPermission","Button","type","postCount","Form","Check","checked","onChange","switchWarning","connect","dispatch","GET_FEEDS","tableHeaders","align","Managefeeds","arguments","currentPage","showPost","totalPage","allFeeds","currentPageFeeds","changeTotalPost","e","parseInt","value","countAllPage","nextPrev","no","manageFeeds","feeds","Math","ceil","feedId","action","ACTION_FEED_STATUS","onSuccessUpdateRedux","ACTION_UPDATE_SOCIAL_ACCOUNT","val","getModeration","Swal","showCloseButton","showCancelButton","focusConfirm","confirmButtonText","confirmButtonAriaLabel","cancelButtonText","cancelButtonAriaLabel","then","result","ACTION_DELETE_FEED","onDeleteUpdateRedux","handleMessage","async","response","parseAUTHJson","event","data","code","addAccountFromId","error","console","log","getPagination","pagination","i","push","window","addEventListener","prevState","_this$props$manageFee","_this$props$manageFee2","_this$props$manageFee3","_this$props$manageFee4","_this$props$manageFee5","loading","wallsLoader","_this$props$manageFee6","wallId","getItem","navigate","componentWillUnmount","removeEventListener","_allWalls$find","_getWallData$name","_getWallData$thumbnai","allWalls","startIdx","getWallData","slice","find","_Fragment","SubHeaderCrumbs","crumbs","imgUrl","thumbnail","link","RightComponent","iconClass","TOGGLE_ADD_GALLERY","showGallerySwitcher","Container","Card","Body","minHeight","Loader","Table","header","EmptyWithIcon","desc","button","text","isFullScreen","_state$dashboardData","_state$dashboardData2","_state$dashboardData3","dashboardData","dashboarddata","callback","payload","SNAPUP_DETAILS_ACTION","withRouter"],"sourceRoot":""}