{"version":3,"file":"static/js/4955.fd9a75e7.chunk.js","mappings":"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","sources":["app/Layout/Main/Feeds/ManualUpload/ManualHead.js"],"sourcesContent":["import { Component } from \"react\";\nimport { Alert, Button, Card, Col, Container, Image, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { baseUrl, FontAwesomeIcon } from \"../../../../../Assets/AssetsHelper\";\nimport { generateRandomArray, GET_NETWORK_ICON, GET_NETWORK_NAME } from \"../../../../../utils\";\nimport { getCustomNetwork } from \"../../../../../actions/appsMoreAction\";\nimport withRouter from \"../../../../routes/WithRouter\";\n\nclass ManualHead extends Component{\n    state={\n        networkList:[{id:18}, {id:28}],\n        loader:false\n    }\n    \n    // componentDidMount(){\n    //     getCustomNetwork().then(response => {\n    //         const {responseData} = response.data\n    //         if(responseData?.length > 0) this.setState({networkList:responseData, loader:false})\n    //     })\n    // }\n\n    render(){\n        const {loader, networkList} = this.state\n        const { onBoarding, setNetwork, navigate } = this.props\n        return <div className='d-flex flex-column flex-column-fluid w-100 py-5 manual_upload_'>\n            {/* {!onBoarding ? <div className=\"subheader\">\n                <Container fluid>\n                    <div className='d-flex align-items-center'>\n                        <Link to={`/content/addfeed/${localStorage.getItem('wallId')}`} className=\"btn btn-icon bg-gray-100 btn-sm me-2\" title='Upload Feed'><FontAwesomeIcon icon={'angle-left'} iconClass={'me-0'}/></Link>\n                        <h1 className=\"me-2 h4 my-3\">Upload Feed</h1>\n                    </div>\n                </Container>\n            </div> : null} */}\n            <Container>\n                <Card className={`${onBoarding?'shadow-none border-0':''}`}>\n                    <Card.Body className='f-center flex-column manual_upload_card'>\n                        <h3 className='text-center mb-3'>Manual Uploads</h3>\n                        <p className='text-center mb-8'>Upload content directly to the feed via device or by adding a post URL from Instagram or TikTok </p>\n                        <div className='f-center flex-wrap w-100 flex-column'>\n                            {!loader ? \n                            <Row className='w-100' style={{maxWidth:600}}>\n                                <Col>\n                                    <Button variant='outline-secondary' onClick={() => onBoarding ? setNetwork(0) : navigate(`/manual-upload/feed?network=0`)} className='btn btn-outline-secondary w-100 rounded-1 f-center flex-column p-7 mb-4'>\n                                        <p className='display-2 mb-3'>\n                                            <FontAwesomeIcon type={'light'} icon={'laptop'} iconClass={'me-0'}/>\n                                        </p>\n                                        <p className='mb-0 fs-10 fw-medium'>My Device</p>\n                                    </Button>\n                                </Col>\n\n                                {networkList.length > 0 ? networkList.map(network =><Col>\n                                    <Button variant='outline-secondary' onClick={() => onBoarding ? setNetwork(network.id) : navigate(`/manual-upload/feed?network=${network.id}`)} className='btn btn-outline-secondary w-100 rounded-1 f-center flex-column p-7 mb-4'>\n                                        <p className='display-2 mb-3'>\n                                            <Image src={baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(network.id)}.svg`)} height={36} width={36} fluid/>\n                                        </p>\n                                        <p className='mb-0 fs-10 fw-medium'>{GET_NETWORK_NAME(network.id)}</p>\n                                    </Button>\n                                </Col>) : null}\n                                <div className=\"d-flex justify-content-center mt-4\">\n                                <Link to={`/content/addfeed/${localStorage.getItem('wallId')}`} className=\"text-decoration-underline text-muted p-2\" title='Upload Feed'>\n                                <FontAwesomeIcon icon={'arrow-left'} iconClass={'me-2'}/>\n                                Back</Link>\n                                </div>\n                            </Row> \n                            :\n                            <Row className='w-100' style={{maxWidth:600}}>\n                            {generateRandomArray(3).map((_, index) => <Col>\n                                <div key={index} className=\"btn btn-outline-secondary w-100 rounded-1 f-center flex-column p-7 mb-4 d-flex\">\n                                    <div className=\"sk_rect h-40px w-40px mb-3\"></div>\n                                    <div className=\"sk_line h-10px mb-1 w-75\"></div>\n                                </div>\n                                </Col>)}\n                            </Row>\n                            }\n                            {onBoarding ? \n                                <div className=\"f-center\">\n                                    <Button variant='link' className=\"text-decoration-underline\" onClick={() => this.props.onBack('c_n')}>\n                                        Choose another Network\n                                    </Button>\n                                </div>: null}\n                        </div>\n                    </Card.Body>\n                </Card>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(ManualHead)"],"names":["ManualHead","Component","constructor","arguments","state","networkList","id","loader","render","this","onBoarding","setNetwork","navigate","props","_jsx","className","children","Container","Card","_jsxs","Body","Row","style","maxWidth","generateRandomArray","map","_","index","Col","Button","variant","onClick","FontAwesomeIcon","type","icon","iconClass","length","network","Image","src","baseUrl","GET_NETWORK_ICON","height","width","fluid","GET_NETWORK_NAME","Link","to","localStorage","getItem","title","onBack","withRouter"],"sourceRoot":""}