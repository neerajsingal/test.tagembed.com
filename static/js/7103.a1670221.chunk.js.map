{"version":3,"file":"static/js/7103.a1670221.chunk.js","mappings":"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","sources":["app/Authentication/Components/OtherAuthAction.js","app/Authentication/ResetPassword.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nconst OtherAuthAction = ({ text, link, linkText }) => <div className=\" text-center fw-normal fs-8 mt-lg-5 mt-1 f-center mb-5\">{text}\n       <Link to={link} className=\"btn btn-link text-decoration-none fw-bold fs-8 p-0 ms-1\" title=\"Auth\">{linkText}</Link>\n</div>\nexport default OtherAuthAction;\n","import React, { Component } from \"react\";\nimport { Form, Button} from \"react-bootstrap\";\nimport OtherAuthAction from \"./Components/OtherAuthAction\";\nimport { FontAwesomeIcon } from \"../../Assets/AssetsHelper\";\nimport { resetPasswords } from '../../actions/loginActions'\nimport { validatePassword } from \"../../utils\";\nimport PwdStrength from \"../Layout/Main/CommonComponents/PwdStrength\";\nimport withRouter from \"../routes/WithRouter\";\nimport FormTerms from \"./Components/FormTerms\";\n\nclass ResetPassword extends Component {\n    \n    state = { accountPassword: null, passwordError: null, accountRePassword: null, passwordReError: null, success: false, strength: 0 , btnLoader:false, visiblePass:false, reVisiblePass:false, successError:false , strongPass:true}\n\n    onPasswordReTextChange = event => {\n        this.setState({ accountRePassword: event.target.value }, () => {\n            if (this.state.accountPassword != this.state.accountRePassword) this.setState({ passwordReError: true })\n            else this.setState({ passwordReError: false })\n        })\n    }\n\n    onClickToResetPassword = event => {\n        const { accountPassword, accountRePassword, passwordError, passwordReError, strength } = this.state;\n        const { token, userId } = this.props.params;\n        if(strength == 4){\n        var self = this;\n        self.setState({ btnLoader:true })\n        if(accountPassword && String(accountPassword).length >= 8 && accountRePassword && String(accountRePassword).length == String(accountPassword).length && !passwordError && !passwordReError){\n            resetPasswords({ userId: userId, token: token, password: accountPassword }).then((response) => {\n                this.props.navigate('/accounts/login?reset=1')\n            }).catch(()=>{\n                this.props.navigate('/accounts/login?reset=2')\n            })\n        }\n        else{\n            if(!accountPassword || String(accountPassword).length < 8) this.setState({passwordError: true})\n            else if(accountPassword != accountRePassword) this.setState({ passwordReError: true})\n            this.setState({btnLoader:false})\n        }\n      }\n      else{\n            this.setState({strongPass:false})\n        }\n    }\n\n\n    checkPassStrength = event => {\n        const password = event.target.value;\n        const { strength } = validatePassword(password); \n        this.setState({ accountPassword: password, strength, passwordReError: null, passwordError: false , strongPass: strength==4 ? true :this.state.strongPass});\n    }\n\n    showPassword = () => {\n        this.setState({\n            visiblePass: !this.state.visiblePass\n        })\n    }\n    render() {\n        const { prefix, params } = this.props\n        const { strength, passwordError, success, accountRePassword, passwordReError, accountPassword, btnLoader, visiblePass, reVisiblePass, successError, strongPass} = this.state\n\n        return <div className=\"w-100 mb-lg-0 mb-3\">\n                    <div className=\"text-start mb-5\">\n                        <h1 className=\" mb-0 display-2 fw-bold mb-3\">Reset Password?</h1>\n                    </div>\n                    {success ? <div className={`alert alert-${successError ? `danger` :`success`} py-2`} role=\"alert\">\n                        {successError ? `Some error occured, please try again later.` : `You have successfully updated your password. You can login now with your new password.`}\n                    </div> : null}\n\n                    {!success ? <> \n                    <div className=\"mb-8\">\n                        <Form.Group className=\"mb-4 mb-xl-5\">\n                            <Form.Label className=\"fw-bold \" htmlFor=\"password_\">Enter Password</Form.Label>\n                            <span className={`position-relative d-block mb-2 ${passwordError ? 'is-invalid':''}`}>\n                                <Form.Control type={visiblePass ? 'text' : 'password'} id=\"password_\" size=\"lg\" placeholder=\"Password\" minLength=\"8\" maxLength=\"24\" onChange={this.checkPassStrength} value={accountPassword} />\n                                <span className=\"view_pass fs-6 btn btn-icon bg-transparent border-0 text-gray-500 position-absolute translate-middle top-50\" onClick={() => this.setState({ visiblePass: !visiblePass })}>\n                                    <FontAwesomeIcon icon={visiblePass ? 'eye' : 'eye-slash'}/>\n                                </span>\n                            </span>\n                            {passwordError ? <span className=\"invalid-feedback mb-1\">Enter valid password.</span> : null}\n                            <span className={`${strongPass ? 'text-muted' :'text-danger'} fs-9 mb-2`}>Password must be at least 8 characters long and include a combination of letters, numbers, and special symbols (e.g., @, #, $, %).</span>\n                        </Form.Group>\n                        <PwdStrength strength={strength} />\n                        <div className=\"fv-row mb-3 pt-1\">\n                            <Form.Group className={`mb-4 mb-xl-5`}>\n                                <Form.Label className=\"fw-bold \" htmlFor=\"re-password_\">Repeat Password</Form.Label>\n                                <span className={`position-relative d-block mb-2  ${passwordReError ? `is-invalid` : ``} `}>\n                                    <Form.Control type={reVisiblePass ? 'text' : 'password'} id=\"re-password_\" size=\"lg\" placeholder=\"Repeat Password\" minLength=\"8\" maxLength=\"24\" onChange={this.onPasswordReTextChange} value={accountRePassword || ''} />\n                                    <span className=\"view_pass fs-6 btn btn-icon bg-transparent border-0 text-gray-500 position-absolute translate-middle top-50\" onClick={() => this.setState({ reVisiblePass: !reVisiblePass })}>\n                                        <FontAwesomeIcon icon={reVisiblePass ? 'eye' : 'eye-slash'}/>\n                                    </span>\n                                </span>\n                                {passwordReError ? <div className=\"invalid-feedback\">Password does not match</div> : null}\n                            </Form.Group>\n                        </div>\n                    </div>\n                    <div className=\"d-grid mb-3\">\n                        <Button type=\"submit\" variant=\"primary\" size={'lg'} className={`${btnLoader ? ' disabled' : ''}`} onClick={this.onClickToResetPassword}>\n                            <span className=\"indicator-label\" style={{ display: btnLoader ? 'none' : 'block' }}>Reset Password</span>\n                            <span className=\"indicator-progress\" style={{ display: !btnLoader ? 'none' : 'block' }}> Please wait...\n                                <span className=\"spinner-border spinner-border-sm align-middle ms-2\"></span>\n                            </span>\n                        </Button>\n                    </div>\n                </> : null}\n                <OtherAuthAction text=\"Back to\" link={`${prefix}accounts/login`} linkText={'Login'} />\n                <FormTerms/>\n            </div>\n    }\n}\n\nexport default withRouter(ResetPassword)"],"names":["_ref","text","link","linkText","_jsxs","className","children","_jsx","Link","to","title","ResetPassword","Component","constructor","arguments","state","accountPassword","passwordError","accountRePassword","passwordReError","success","strength","btnLoader","visiblePass","reVisiblePass","successError","strongPass","onPasswordReTextChange","event","this","setState","target","value","onClickToResetPassword","token","userId","props","params","String","length","resetPasswords","password","then","response","navigate","catch","checkPassStrength","validatePassword","showPassword","render","prefix","role","_Fragment","Form","Group","Label","htmlFor","Control","type","id","size","placeholder","minLength","maxLength","onChange","onClick","FontAwesomeIcon","icon","PwdStrength","Button","variant","style","display","OtherAuthAction","FormTerms","withRouter"],"sourceRoot":""}