{"version":3,"file":"static/js/8140.a65c128e.chunk.js","mappings":"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","sources":["app/Layout/Main/Feeds/ManualUpload/ManualUploadWrap.js","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Container, Card, Button, Form, Image, Row, Col, InputGroup, Alert, FormGroup } from 'react-bootstrap'\nimport { FontAwesomeIcon, baseUrl } from '../../../../../Assets/AssetsHelper';\nimport { Link } from 'react-router-dom';\nimport { GET_NETWORK_ICON, GET_NETWORK_NAME, TOAST_ERROR, TOAST_SUCCESS, URL_VALIDATION, validURL } from '../../../../../utils';\nimport queryString from 'query-string';\nimport ManualUploadModal from './ManualUploadModal';\nimport { customPostUrlsubmit } from '../../../../../actions/appsMoreAction';\nimport withRouter from '../../../../routes/WithRouter';\n\nclass ManualUploadWrap extends Component {\n       constructor(props) {\n              super(props);\n              this.state = {\n                     spinner:false,\n                     network:'',\n                     showManual:false,\n                     urlError:false,\n                     url:''\n              };\n       }\n\n       componentDidMount(){\n              const {onBoarding, manualSelect} = this.props\n              if(onBoarding){\n                     this.setState({network:manualSelect, showManual: manualSelect == 0 ? true : false})\n              }\n              else{\n                     const parsed = queryString.parse(window.location.search)\n                     if(parsed) this.setState({network:parsed.network, showManual: parsed.network == '0' ? true : false})\n              }      \n       }\n\n       onSubmit = () => {\n              const {url, network} = this.state\n              const {onBoarding, onNext} = this.props\n              const regex = /^(http:\\/\\/|https:\\/\\/).+/;\n              if (url && URL_VALIDATION(url)) {\n                     this.setState({spinner:true});\n                     const data = {\n                            networkId: parseInt(network),\n                            postUrl: !regex.test(url) ? `https://${url}` : url,\n                            wallId: localStorage.getItem('wallId')\n                     }\n       \n                     customPostUrlsubmit(data).then((response) => {\n       \n                            if (response.data.responseCode == 200) {\n                            if (response.data.responseStatus == 'success') {\n                                   \n                                   TOAST_SUCCESS(\"Post created successfully.\");\n                                   onBoarding ? onNext() : this.props.navigate(`/content/moderation/${localStorage.getItem('wallId')}`)\n                            } else {\n                                   TOAST_ERROR('Some error occured, please try again later');\n                            }\n                            }\n                            this.setState({spinner:false});\n                     }).catch((error) => {\n                           const { responseMessage } = error.response.data\n                            TOAST_ERROR(responseMessage);\n                            this.setState({spinner:false});\n                     })\n              } \n              else {\n                     this.setState({urlError:true})\n              }\n       }\n\n\n       render() {\n              const { spinner, network, showManual, urlError } = this.state\n              const {onBoarding, navigate, setNetwork, onNext} = this.props\n              return (<div className='d-flex flex-column flex-column-fluid w-100 py-5 manual_upload_wrap'>\n                            {/* {!onBoarding ?\n                            <div className=\"subheader\">\n                                   <Container fluid>\n                                          <div className='f-between'>\n                                                 <h1 className=\"me-2 h4 my-3\">Feeds</h1>\n                                          </div>\n                                   </Container>\n                            </div> : null} */}\n\n                            <Container>\n                                   <Row className='f-center manual_upload_card'>\n                                          <Col lg={8} xl={6}>\n                                                 <Card className={`${onBoarding?'shadow-none border-0':''}`}>\n                                                        {onBoarding ? \n                                                        <div className=\"d-flex align-items-center mb-5\">\n                                                               <div className=\"symbol symbol-40 flex-shrink-0 me-3\">\n                                                                      <Image height={40} width={40} src={baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(network ? parseInt(network) : 0)}.svg`)} alt={''} fluid />\n                                                               </div>\n                                                               <div className=\"d-flex flex-column flex-grow-1 my-lg-0 my-2 pr-3\">\n                                                                      <span className=\"fs-6 fw-bold text-gray-800\">{GET_NETWORK_NAME(network ? parseInt(network) : 0)}</span>\n                                                                      <p className=\"fs-9 mb-0 fw-medium\">Add your {GET_NETWORK_NAME(network ? parseInt(network) : 0)} <span className=''>post</span></p>\n                                                               </div>\n                                                        </div>\n                                                        :\n                                                        <Card.Header className={`${onBoarding?'border-0':''}`}>\n                                                               <div className=\"d-flex flex-wrap align-items-center py-4\">\n                                                                      <div className=\"symbol symbol-50 flex-shrink-0 me-4\">\n                                                                             <Image src={baseUrl(`media/icons/social-icons-square/${network == '0' ? 'manual-upload' : GET_NETWORK_ICON(network ? parseInt(network) : 0)}.svg`)} fluid />\n                                                                      </div>\n                                                                      <div className=\"d-flex flex-column flex-grow-1 my-lg-0 my-2 pe-3\">\n                                                                             <h3 className=\"mb-1\">{GET_NETWORK_NAME(network ? parseInt(network) : 0)}</h3>\n                                                                             <p className=\"text-muted mb-0 fw-medium\">Add your {GET_NETWORK_NAME(network ? parseInt(network) : 0)} post</p>\n                                                                      </div>\n                                                               </div>\n                                                        </Card.Header>\n                                                        }\n                                                        {!showManual ? <>\n                                                        <Card.Body className={`${onBoarding ? 'p-0' : 'p-lg-8'}`}>\n                                                               <div className='my-4'>\n                                                                      <FormGroup className='mb-4'>\n                                                                             <InputGroup className={`${urlError ? 'is-invalid' : ''}`}>\n                                                                             <InputGroup.Text id=\"basic-addon2\"><FontAwesomeIcon type={'solid'} icon={'link'} /></InputGroup.Text>\n                                                                                    <Form.Control size='lg' placeholder=\"Enter URL to import post\" onChange={e=>this.setState({url:e.target.value, urlError:false})}/>\n                                                                             </InputGroup>\n                                                                             {urlError && <span className='invalid-feedback'>Please enter valid url.</span>}\n                                                                      </FormGroup>\n                                                                      <Alert variant=\"warning\" className='border border-warning'>\n                                                                             <Alert.Heading className='f-center alert_icon_head'>\n                                                                                    <span className='f-center'>\n                                                                                    <FontAwesomeIcon icon={'lightbulb'} iconClass={'me-1'} />\n                                                                                    Pro Tip\n                                                                                    </span>\n                                                                             </Alert.Heading>\n                                                                             <p className=\"fw-medium mb-0 fs-8 text-gray-700\">Upload content directly to the feed by adding a post URL.</p>\n                                                                      </Alert>\n                                                               </div>\n                                                        </Card.Body>\n                                                        <Card.Footer className={onBoarding ? 'p-0 border-0':'px-lg-8'}>\n                                                               <div className={`d-flex w-100 align-items-center p-2 ${onBoarding?' justify-content-between':' justify-content-end'}`}>\n                                                                      <Button variant={onBoarding?'link':'secondary'} onClick={() => onBoarding ? setNetwork() : navigate(`/manual-upload`)}>\n                                                                      {onBoarding ? <FontAwesomeIcon icon={'arrow-left'} iconClass={'me-2'} />:''}\n                                                                             Back</Button>\n                                                                      <Button id=\"create_feed\" className={`ms-3 ${spinner ? 'spinner' : ''} `} onClick={()=>this.onSubmit()}>Import</Button>\n                                                               </div>\n                                                        </Card.Footer>\n                                                        </> : <ManualUploadModal onBoarding={onBoarding} setNetwork={setNetwork} onNext={onNext}/>}\n                                                 </Card>\n                                          </Col>\n                                   </Row>\n                            </Container>\n                     </div>\n              );\n       }\n}\n\nexport default withRouter(ManualUploadWrap);","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["ManualUploadWrap","Component","constructor","props","super","onSubmit","url","network","this","state","onBoarding","onNext","regex","URL_VALIDATION","setState","spinner","data","networkId","parseInt","postUrl","test","wallId","localStorage","getItem","customPostUrlsubmit","then","response","responseCode","responseStatus","TOAST_SUCCESS","navigate","TOAST_ERROR","catch","error","responseMessage","urlError","showManual","componentDidMount","manualSelect","parsed","queryString","parse","window","location","search","render","setNetwork","_jsx","className","children","Container","Row","Col","lg","xl","_jsxs","Card","Image","height","width","src","baseUrl","GET_NETWORK_ICON","alt","fluid","GET_NETWORK_NAME","Header","ManualUploadModal","_Fragment","Body","FormGroup","InputGroup","Text","id","FontAwesomeIcon","type","icon","Form","Control","size","placeholder","onChange","e","target","value","Alert","variant","Heading","iconClass","Footer","Button","onClick","withRouter","InputGroupText","React","_ref","ref","bsPrefix","as","useBootstrapPrefix","classNames","displayName","hasValidation","contextValue","useMemo","InputGroupContext","Provider","Object","assign","Radio","FormCheckInput","Checkbox"],"sourceRoot":""}