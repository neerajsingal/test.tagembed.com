{"version":3,"file":"static/js/8932.b9fef0db.chunk.js","mappings":"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","sources":["app/Authentication/Components/AccountVerify.js","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Image, Container, Card, InputGroup, Form } from \"react-bootstrap\";\nimport { getUserInfo, reSendEmail } from \"../../../actions/loginActions\";\nimport { TOAST_DISMISS, TOAST_SUCCESS } from \"../../../utils\";\nimport withRouter from \"../../routes/WithRouter\";\nimport { baseUrl } from \"../../../Assets/AssetsHelper\";\nimport { IS_TAGEMBED } from \"../../../actions/api\";\n\nclass AccountVerify extends Component {\n    componentWillMount() {\n        const { navigate, authorized, getUserInfo } = this.props;\n        this.reSendEmailCall()\n        window.addEventListener(\"message\", this.isVerified);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"message\", this.isVerified);\n    }\n\n    isVerified = (event) => {\n        const { getUserInfo, navigate } = this.props\n        getUserInfo(navigate)\n    }\n\n    reSendEmailCall=()=>{\n        var email= localStorage.getItem(\"emailId\") \n        TOAST_SUCCESS('Verification link successfully sent');\n        reSendEmail(email);\n        setTimeout(() => { TOAST_DISMISS()}, 2000);\n    }\n    \n    onSignOut=()=>{\n        localStorage.clear()\n        this.props.navigate('/accounts/register')\n    }\n\n    render() {\n        return (<Container>\n                    <div className=\"f-center h-100vh\">\n                        <Card className=\"p-lg-8\" style={{maxWidth:700}}>\n                            <Card.Body className=\"f-center flex-column\">\n                                <Image className=\"mb-4\" src={baseUrl(`media/images/email-verification-${IS_TAGEMBED ? \"tagembed\" : \"tagbox\"}.svg`)} height={185} width={276} alt='' fluid/>\n                                <h2 className='text-center mb-5 h1'>You're just a step away.</h2>\n                                <p className='fw-medium text-muted text-center'>\n                                    We have sent an email to <span className=\"fw-bold \">{localStorage.getItem(\"emailId\")} </span>  \n                                        with the verification link. Please go to your email account to verify. If you don't see the email in your inbox or spam folder, try resending the email here:\n                                </p>\n                                <div className=\"mx-auto w-100\" style={{maxWidth:420}}>\n                                <InputGroup className=\"mb-3\">\n                                    <Form.Control size=\"lg\" placeholder='example@mail.com' name='emailId' defaultValue={localStorage.getItem(\"emailId\")} readOnly/>\n                                    <InputGroup.Text id=\"basic-addon2\" className=\"bg-primary cursor-pointer text-gray-100 fw-medium border-primary\" onClick={()=>this.reSendEmailCall()}>Resend Email</InputGroup.Text>\n                                </InputGroup>\n                                </div>\n                            </Card.Body>\n                        </Card>\n                </div>\n                </Container>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        getUserInfo: (navigate) => dispatch(getUserInfo(navigate))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(AccountVerify));","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["AccountVerify","Component","constructor","arguments","isVerified","event","getUserInfo","navigate","this","props","reSendEmailCall","email","localStorage","getItem","TOAST_SUCCESS","reSendEmail","setTimeout","TOAST_DISMISS","onSignOut","clear","componentWillMount","authorized","window","addEventListener","componentWillUnmount","removeEventListener","render","_jsx","Container","children","className","Card","style","maxWidth","_jsxs","Body","Image","src","baseUrl","IS_TAGEMBED","height","width","alt","fluid","InputGroup","Form","Control","size","placeholder","name","defaultValue","readOnly","Text","id","onClick","connect","state","dispatch","withRouter","InputGroupText","React","_ref","ref","bsPrefix","as","useBootstrapPrefix","classNames","displayName","hasValidation","contextValue","useMemo","InputGroupContext","Provider","value","Object","assign","Radio","FormCheckInput","type","Checkbox"],"sourceRoot":""}