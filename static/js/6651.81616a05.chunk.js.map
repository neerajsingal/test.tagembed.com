{"version":3,"file":"static/js/6651.81616a05.chunk.js","mappings":"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","sources":["app/Authentication/Components/Industry.js","app/Authentication/MoreInfo.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\n\nconst Industry = ({ onIndustryChange }) => {\n    const [selectedIndustry, setSelectedIndustry] = useState('');\n    const [customIndustry, setCustomIndustry] = useState('');\n\n    const industries = [\n        'Food Industry',\n        'Healthcare',\n        'Education',\n        'Finance',\n        'Agriculture',\n        'Insurance',\n        'Automobile',\n        'Communications',\n        'Others'\n    ];\n\n    const handleIndustryChange = (industry) => {\n        setSelectedIndustry(industry);\n        if (industry !== 'Others') {\n            onIndustryChange(industry);\n            setCustomIndustry('');\n        }\n    };\n\n    const handleCustomIndustryChange = (e) => {\n        const value = e.target.value;\n        setCustomIndustry(value);\n        onIndustryChange(value);\n    };\n\n    return (\n        <div className=\"industry-selector\">\n            <div className=\"d-flex flex-wrap gap-3\">\n                {industries.map((industry) => (\n                    <div\n                        key={industry}\n                        className={`py-2 px-3 rounded cursor-pointer ${\n                            selectedIndustry === industry ? 'bg-dark text-white' : 'bg-white text-muted'\n                        }`}\n                        onClick={() => handleIndustryChange(industry)}\n                        style={{ cursor: 'pointer' }}\n                    >\n                        {industry}\n                    </div>\n                ))}\n            </div>\n            {selectedIndustry === 'Others' && (\n                <Form.Group>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter your industry\"\n                        value={customIndustry}\n                        onChange={handleCustomIndustryChange}\n                        className=\"mt-2 py-2 px-3 rounded\"\n                        style={{maxWidth:'400px'}}\n                    />\n                </Form.Group>\n            )}\n        </div>\n    );\n};\n\nexport default Industry;\n","import React, { Component } from \"react\";\nimport { Form, Button, Navbar } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport IntlTelInput from 'react-intl-tel-input';\nimport 'react-intl-tel-input/dist/main.css';\nimport { getUserInfo, otherInfoSkip, otherInfoUpate } from '../../actions/loginActions'\nimport FormTerms from \"./Components/FormTerms\";\nimport Industry from \"./Components/Industry\";\n\nconst isValidNumber = (n) => {\n    return /^[1-9]\\d{9,14}$/.test(n);\n}\n\nclass MoreInfo extends Component {\n    state = { accountCompanyName: null, phoneError: null, phone: null, country_code: null, countrySortname: null, industry: null }\n\n    onACNChange = event => this.setState({ accountCompanyName: event.target.value })\n\n    onIndustryChange = (value) => {\n        this.setState({ industry: value });\n    }\n\n    componentDidMount() {\n        this.setState({ countrySortname: 'US' });\n    }\n\n    onClickToSkip = event => {\n        const { history, getUserData } = this.props\n        otherInfoSkip(history, () => getUserData(history, false))\n    }\n\n    onClickToFinish = event => {\n        const { history, getUserData } = this.props\n        const { accountCompanyName, phone, country_code, phoneError, industry } = this.state;\n        const payload = {\n            organization: String(accountCompanyName || ''),\n            contact_no: String(phone || ''),\n            country_code: String(country_code || ''),\n            industry: String(industry || '')\n        }\n        if (accountCompanyName && String(accountCompanyName).length > 0 || (phone && country_code && !phoneError)) {\n            if ((phone && country_code && !phoneError && accountCompanyName && String(accountCompanyName).length > 0) || (!phoneError && accountCompanyName && String(accountCompanyName).length > 0) || (phone && country_code && !phoneError)) {\n                otherInfoUpate(payload, history, () => getUserData(history, false));\n            }\n        }\n        else this.onClickToSkip()\n    }\n\n    updatePhoneNumber1 = (isValid, value, selectedCountryData) => {\n        if (value) {\n            if (isValidNumber(value)) {\n                this.setState({ phone: value, country_code: selectedCountryData.dialCode, phoneError: false })\n            }\n            else {\n                this.setState({ phoneError: true, phone: value })\n            }\n        }\n        else this.setState({ phoneError: false, phone: value })\n    }\n\n    render() {\n        const { accountCompanyName, countrySortname, phoneError } = this.state;\n\n        return <div className=\"w-100 mb-lg-0 mb-3\">\n            <div className=\"text-start\">\n                <h1 className=\" mb-0 display-2 fw-bold\">Want a more personalized experience?</h1>\n            </div>\n            <div className=\"mb-8\">\n                <Form.Group className=\"mb-4 my-5 py-5\">\n                    <Form.Label className=\"fw-bold mb-4\" htmlFor=\"industry\">Mark Your Industry</Form.Label>\n                    <Industry onIndustryChange={this.onIndustryChange} />\n                </Form.Group>\n                <Form.Group className=\"mb-4 mb-xl-5 py-xl-4\">\n                    <Form.Label className=\"fw-bold d-block\" htmlFor=\"comp_name\">Phone No.</Form.Label>\n                    <IntlTelInput style={{ maxWidth: '400px' }} key={countrySortname} fieldId=\"phone\" preferredCountries={[countrySortname ? countrySortname : 'US']} onPhoneNumberChange={this.updatePhoneNumber1}\n                        onPhoneNumberBlur={this.updatePhoneNumber1}\n                        containerClassName={`intl-tel-input w-100 ${phoneError ? 'is-invalid mb-1' : ''}`} inputClassName={`form-control form-control-lg w-100 ${phoneError ? 'is-invalid' : ''}`} autocomplete=\"off\" data-intl-tel-input-id=\"0\" placeholder=\"9987654321\" />\n                    {phoneError ? <span className=\"invalid-feedback\">Please enter a valid Phone Number</span> : null}\n                </Form.Group>\n            </div>\n            <Form.Group className=\"mb-4 mb-xl-5\">\n                <Button size=\"lg\" onClick={() => countrySortname ? this.onClickToFinish() : ''} id=\"finish_info\" className=\"me-4\">Submit</Button>\n                <Button variant=\"link text-gray-400 fw-medium active-primary\" onClick={() => countrySortname ? this.onClickToSkip() : ''} id=\"skip_info\" className=\"text-gray-800 text-decoration-underline\">I'll do this later</Button>\n            </Form.Group>\n            <FormTerms />\n        </div>\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getUserData: (history, callBack = 0) => dispatch(getUserInfo(history, callBack))\n    }\n}\nexport default connect(null, mapDispatchToProps)(MoreInfo);"],"names":["_ref","onIndustryChange","selectedIndustry","setSelectedIndustry","useState","customIndustry","setCustomIndustry","_jsxs","className","children","_jsx","map","industry","onClick","handleIndustryChange","style","cursor","Form","Group","Control","type","placeholder","value","onChange","e","target","maxWidth","MoreInfo","Component","constructor","arguments","state","accountCompanyName","phoneError","phone","country_code","countrySortname","onACNChange","event","this","setState","onClickToSkip","history","getUserData","props","otherInfoSkip","onClickToFinish","payload","organization","String","contact_no","length","otherInfoUpate","updatePhoneNumber1","isValid","selectedCountryData","test","dialCode","componentDidMount","render","Label","htmlFor","Industry","IntlTelInput","fieldId","preferredCountries","onPhoneNumberChange","onPhoneNumberBlur","containerClassName","inputClassName","autocomplete","Button","size","id","variant","FormTerms","connect","dispatch","callBack","undefined","getUserInfo"],"sourceRoot":""}